// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider     = "postgresql"
  // url          = env("DATABASE_URL_DEV")
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model ToBuyList {
  id                 String   @id @default(cuid())
  listName           String
  name               String
  count              String
  status             String
  createdByUserEmail String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [createdByUserEmail], references: [email], onDelete: Cascade)

  @@index([createdByUserEmail])
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String         @id @default(cuid())
  name          String
  password      String
  email         String         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ingredients   Ingredients[]
  recipe        Recipe[]
  MenuSchedule  MenuSchedule[]
  toBuyList     ToBuyList[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ingredients {
  id               String             @id @default(cuid())
  name             String
  description      String
  category         String
  unit             String
  createdByUserId  String
  frequency        Int                @default(0)
  notes            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [createdByUserId], references: [id])
  RecipeIngredient RecipeIngredient[]

  @@unique([name, description, unit])
  @@index([createdByUserId])
}

model Recipe {
  id               String             @id @default(cuid())
  title            String
  description      String?
  category         String
  createdByUserId  String
  frequency        Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  recipeIngredient RecipeIngredient[]
  images           Image[]
  user             User               @relation(fields: [createdByUserId], references: [id])
  MenuSchedule     MenuSchedule[]

  @@index([createdByUserId])
}

model MenuSchedule {
  id          String   @id @default(cuid())
  menuId      String
  userId      String
  plannedDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recipe      Recipe   @relation(fields: [menuId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([menuId])
  @@index([userId])
}

model RecipeIngredient {
  id           String      @id @default(cuid())
  recipeId     String
  ingredientId String
  quantity     Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  recipe       Recipe      @relation(fields: [recipeId], references: [id])
  ingredient   Ingredients @relation(fields: [ingredientId], references: [id])

  @@unique([recipeId, ingredientId])
  @@index([recipeId])
  @@index([ingredientId])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  recipeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipe    Recipe   @relation(fields: [recipeId], references: [id])

  @@index([recipeId])
}
